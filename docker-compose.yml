version: '3'

services:
  source_postgres:
    container_name: source_db
    image: postgres:14
    ports:
      - "${SOURCE_PORT}:5432"
    restart: unless-stopped
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${SOURCE_DB}"
      POSTGRES_USER: "${SOURCE_USER}"
      POSTGRES_PASSWORD: "${SOURCE_PASS}"
    volumes:
      - ./source_db_init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - source_database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${SOURCE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 20

  destination_postgres:
    container_name: destination_db
    image: postgres:14
    ports: 
      - "${DEST_PORT}:5432"
    restart: unless-stopped
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${DEST_DB}"
      POSTGRES_USER: "${DEST_USER}"
      POSTGRES_PASSWORD: "${DEST_PASS}"
    volumes:
      - destination_database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${SOURCE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 20

  dagster_postgres:
    container_name: dagster_db
    image: postgres:14
    ports: 
      - "${DAGSTER_DB_PORT}:5432"
    restart: unless-stopped
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${DAGSTER_DB}"
      POSTGRES_USER: "${DAGSTER_DB_USER}"
      POSTGRES_PASSWORD: "${DAGSTER_DB_PASS}"
    volumes:
      - dagster_database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${SOURCE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 20

  # Turning this off as we're going to run it via Dagster now. Tombstoned for learning purposes.
  # elt:
  #   build:
  #     context: ./elt-script
  #     dockerfile: ./build/elt_script/Dockerfile
  #   networks:
  #     - elt_network
  #   depends_on:
  #     destination_postgres:
  #       condition: service_healthy
  #     source_postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./elt-script/elt_script:/app/elt-script/elt_script

  dagster_webserver:
    build:
      context: ./elt-script
      dockerfile: ./build/dagster/Dockerfile.platform
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "${DAGSTER_PORT}"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "${DAGSTER_PORT}"
    ports:
      - "${DAGSTER_PORT}:3000"
    environment:
      DAGSTER_POSTGRES_USER: "${DAGSTER_DB_USER}"
      DAGSTER_POSTGRES_PASSWORD: "${DAGSTER_DB_PASS}"
      DAGSTER_POSTGRES_DB: "${DAGSTER_DB}"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - elt_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dags:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: ./elt-script
      dockerfile: ./build/dagster/Dockerfile.platform
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_USER: "${DAGSTER_DB_USER}"
      DAGSTER_POSTGRES_PASSWORD: "${DAGSTER_DB_PASS}"
      DAGSTER_POSTGRES_DB: "${DAGSTER_DB}"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - elt_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dags:
        condition: service_started

  elt-code:
    build:
      context: ./elt-script
      dockerfile: ./build/dagster/Dockerfile.worker
    container_name: elt-code
    image: elt-code_image
    restart: always
    environment:
      DAGSTER_CURRENT_IMAGE: "elt-code_image"
    env_file:
      - .env
    networks:
      - elt_network

  # dbt:
  #   build:
  #     context: ./elt-script/postgres_transform
  #     dockerfile: ../build/postgres_transform/Dockerfile # Very cheeky. Kinda borked project set up tbh
  #   networks:
  #     - elt_network
  #   depends_on:
  #     elt:
  #       condition: service_completed_successfully
  #   environment:
  #     DBT_PROFILE: default
  #     DBT_TARGET: dev-docker
  #   volumes:
  #     - ./elt-script/postgres_transform:/dbt
      

networks:
  elt_network:
    driver: bridge
    name: elt_network
  
volumes:
  source_database:
  destination_database:
  dagster_database: